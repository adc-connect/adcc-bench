{"project": "adcc", "project_url": "https://adc-connect.org/", "show_commit_url": "https://github.com/adc-connect/adcc/commit/", "hash_length": 8, "revision_to_hash": {"397": "5ab9056093c7d1cd6097d9173a127b2e212e6e3c", "488": "6c9494389430d14d55f6ad873147c5decd575de4", "514": "ea4cbf2ebc3dad438593c5a5418c336fada8aa62", "530": "8c1202a77a4982bb3e27678dbf5e29a8f6a06201", "533": "2ecfb537d8c0414febf9a30aa849ab20247bad94", "539": "f7665c103377f3b3395d283438a0c421207603f6", "565": "b915b2b5c085c5c4eda72df13d11fa3328075499", "570": "734084b328a0e04475114ef27bdc9559d87f7535", "575": "25e247a23cfcc06667dd404e79827a56be75c307", "634": "29a823e6f66e22a6b4e7b17ac1f84d130a9480c2", "635": "22107cf53c99ac482fb8b5681d38453ed6944686", "638": "f522ee6f0fcbddcef4a656df05b1298701fc64e4", "649": "85b2233aeef356cdf403868d191a5e28bf65cd60", "660": "ee17817ec0e3ca38e9253fc95ba347fc0b502bbb", "672": "9c7bba83f51acbec3fa9f262317e994cba89dc0b"}, "revision_to_date": {"397": 1571862439000, "488": 1573581777000, "514": 1576873200000, "530": 1580404157000, "533": 1581544322000, "539": 1581801439000, "565": 1583094112000, "570": 1583273311000, "575": 1584123537000, "634": 1589744890000, "635": 1589745033000, "638": 1589783360000, "649": 1590579887000, "660": 1590613484000, "672": 1590858008000}, "params": {"arch": ["x86_64"], "cpu": ["Intel(R) Xeon(R) CPU E5-2643 0 @ 3.30GHz (2*8 cores HT)"], "machine": ["mlv-clustern08"], "num_cpu": ["16"], "os": ["Linux 4.15.0-66-generic"], "ram": ["792579188"], "python": ["3.6"], "numpy": ["1.15"], "pybind11": [""], "pyscf": ["1.6.3"], "scipy": ["1.2"], "branch": ["master"]}, "graph_param_list": [{"arch": "x86_64", "cpu": "Intel(R) Xeon(R) CPU E5-2643 0 @ 3.30GHz (2*8 cores HT)", "machine": "mlv-clustern08", "num_cpu": "16", "os": "Linux 4.15.0-66-generic", "ram": "792579188", "python": "3.6", "numpy": "1.15", "pybind11": "", "pyscf": "1.6.3", "scipy": "1.2", "branch": "master"}], "benchmarks": {"Fullrun.FullMethylammoniumRadical.peakmem_oscillator_strength": {"code": "class FullrunBase:\n    def default_peakmem_oscillator_strength(self, basis, method, n_states,\n                                            conv_tol, n_threads):\n        \"\"\"\n        Benchmark the memory needed to compute a number of singlet excited states\n        and their oscillator strengths\n        \"\"\"\n        import adcc\n    \n        adcc.set_n_threads(n_threads)\n        res = getattr(adcc, method)(self.scfres, n_states=n_states,\n                                    conv_tol=conv_tol, **self.runadc_kwargs)\n        res.oscillator_strengths\n\n    def default_setup(self, basis, method, n_states, conv_tol, n_threads):\n        from adcc.backends.pyscf import run_hf\n    \n        if \"expensive\" in self.tags and not should_run_expensive():\n            raise NotImplementedError  # Skip testcase\n    \n        # Run the SCF calculation\n        self.scfres = run_hf(self.xyz, basis=basis, **self.runhf_kwargs)", "name": "Fullrun.FullMethylammoniumRadical.peakmem_oscillator_strength", "param_names": ["basis", "method", "n_states", "conv_tol", "n_threads"], "params": [["'cc-pvtz'"], ["'adc1'", "'adc2'", "'adc2x'", "'adc3'"], ["4", "10"], ["1e-06"], ["4"]], "timeout": 3600, "type": "peakmemory", "unit": "bytes", "version": "2abcd5b88ff66845ae9ce6f9a7a503e2efc3e2cec2b5136385df1478f9b36929"}, "Fullrun.FullMethylammoniumRadical.time_excitation_energies": {"code": "class FullrunBase:\n    def default_time_excitation_energies(self, basis, method, n_states,\n                                         conv_tol, n_threads):\n        \"\"\"Benchmark the time needed to compute excitation energies\"\"\"\n        import adcc\n    \n        adcc.set_n_threads(n_threads)\n        getattr(adcc, method)(self.scfres, n_states=n_states,\n                              conv_tol=conv_tol, **self.runadc_kwargs)\n\n    def default_setup(self, basis, method, n_states, conv_tol, n_threads):\n        from adcc.backends.pyscf import run_hf\n    \n        if \"expensive\" in self.tags and not should_run_expensive():\n            raise NotImplementedError  # Skip testcase\n    \n        # Run the SCF calculation\n        self.scfres = run_hf(self.xyz, basis=basis, **self.runhf_kwargs)", "min_run_count": 2, "name": "Fullrun.FullMethylammoniumRadical.time_excitation_energies", "number": 0, "param_names": ["basis", "method", "n_states", "conv_tol", "n_threads"], "params": [["'cc-pvtz'"], ["'adc1'", "'adc2'", "'adc2x'", "'adc3'"], ["4", "10"], ["1e-06"], ["4"]], "processes": 2, "sample_time": 0.01, "timeout": 3600, "type": "time", "unit": "seconds", "version": "ec4ab73417590ace7eecf7c96126c585680f0deb06c34970214abc93aaa035a1", "warmup_time": 0.0}, "Fullrun.FullNeon.peakmem_oscillator_strength": {"code": "class FullrunBase:\n    def default_peakmem_oscillator_strength(self, basis, method, n_states,\n                                            conv_tol, n_threads):\n        \"\"\"\n        Benchmark the memory needed to compute a number of singlet excited states\n        and their oscillator strengths\n        \"\"\"\n        import adcc\n    \n        adcc.set_n_threads(n_threads)\n        res = getattr(adcc, method)(self.scfres, n_states=n_states,\n                                    conv_tol=conv_tol, **self.runadc_kwargs)\n        res.oscillator_strengths\n\n    def default_setup(self, basis, method, n_states, conv_tol, n_threads):\n        from adcc.backends.pyscf import run_hf\n    \n        if \"expensive\" in self.tags and not should_run_expensive():\n            raise NotImplementedError  # Skip testcase\n    \n        # Run the SCF calculation\n        self.scfres = run_hf(self.xyz, basis=basis, **self.runhf_kwargs)", "name": "Fullrun.FullNeon.peakmem_oscillator_strength", "param_names": ["basis", "method", "n_states", "conv_tol", "n_threads"], "params": [["'aug-cc-pvdz'"], ["'adc2'", "'adc2x'", "'adc3'"], ["10"], ["1e-06"], ["4"]], "timeout": 3600, "type": "peakmemory", "unit": "bytes", "version": "2abcd5b88ff66845ae9ce6f9a7a503e2efc3e2cec2b5136385df1478f9b36929"}, "Fullrun.FullNeon.time_excitation_energies": {"code": "class FullrunBase:\n    def default_time_excitation_energies(self, basis, method, n_states,\n                                         conv_tol, n_threads):\n        \"\"\"Benchmark the time needed to compute excitation energies\"\"\"\n        import adcc\n    \n        adcc.set_n_threads(n_threads)\n        getattr(adcc, method)(self.scfres, n_states=n_states,\n                              conv_tol=conv_tol, **self.runadc_kwargs)\n\n    def default_setup(self, basis, method, n_states, conv_tol, n_threads):\n        from adcc.backends.pyscf import run_hf\n    \n        if \"expensive\" in self.tags and not should_run_expensive():\n            raise NotImplementedError  # Skip testcase\n    \n        # Run the SCF calculation\n        self.scfres = run_hf(self.xyz, basis=basis, **self.runhf_kwargs)", "min_run_count": 2, "name": "Fullrun.FullNeon.time_excitation_energies", "number": 0, "param_names": ["basis", "method", "n_states", "conv_tol", "n_threads"], "params": [["'aug-cc-pvdz'"], ["'adc2'", "'adc2x'", "'adc3'"], ["10"], ["1e-06"], ["4"]], "processes": 2, "sample_time": 0.01, "timeout": 3600, "type": "time", "unit": "seconds", "version": "ec4ab73417590ace7eecf7c96126c585680f0deb06c34970214abc93aaa035a1", "warmup_time": 0.0}, "Fullrun.FullNoradrenaline.peakmem_oscillator_strength": {"code": "class FullrunBase:\n    def default_peakmem_oscillator_strength(self, basis, method, n_states,\n                                            conv_tol, n_threads):\n        \"\"\"\n        Benchmark the memory needed to compute a number of singlet excited states\n        and their oscillator strengths\n        \"\"\"\n        import adcc\n    \n        adcc.set_n_threads(n_threads)\n        res = getattr(adcc, method)(self.scfres, n_states=n_states,\n                                    conv_tol=conv_tol, **self.runadc_kwargs)\n        res.oscillator_strengths\n\n    def default_setup(self, basis, method, n_states, conv_tol, n_threads):\n        from adcc.backends.pyscf import run_hf\n    \n        if \"expensive\" in self.tags and not should_run_expensive():\n            raise NotImplementedError  # Skip testcase\n    \n        # Run the SCF calculation\n        self.scfres = run_hf(self.xyz, basis=basis, **self.runhf_kwargs)", "name": "Fullrun.FullNoradrenaline.peakmem_oscillator_strength", "param_names": ["basis", "method", "n_states", "conv_tol", "n_threads"], "params": [["'6-311++G**'"], ["'adc1'", "'adc2'"], ["5"], ["1e-06"], ["16"]], "timeout": 36000, "type": "peakmemory", "unit": "bytes", "version": "2abcd5b88ff66845ae9ce6f9a7a503e2efc3e2cec2b5136385df1478f9b36929"}, "Fullrun.FullNoradrenaline.time_excitation_energies": {"code": "class FullrunBase:\n    def default_time_excitation_energies(self, basis, method, n_states,\n                                         conv_tol, n_threads):\n        \"\"\"Benchmark the time needed to compute excitation energies\"\"\"\n        import adcc\n    \n        adcc.set_n_threads(n_threads)\n        getattr(adcc, method)(self.scfres, n_states=n_states,\n                              conv_tol=conv_tol, **self.runadc_kwargs)\n\n    def default_setup(self, basis, method, n_states, conv_tol, n_threads):\n        from adcc.backends.pyscf import run_hf\n    \n        if \"expensive\" in self.tags and not should_run_expensive():\n            raise NotImplementedError  # Skip testcase\n    \n        # Run the SCF calculation\n        self.scfres = run_hf(self.xyz, basis=basis, **self.runhf_kwargs)", "min_run_count": 1, "name": "Fullrun.FullNoradrenaline.time_excitation_energies", "number": 0, "param_names": ["basis", "method", "n_states", "conv_tol", "n_threads"], "params": [["'6-311++G**'"], ["'adc1'", "'adc2'"], ["5"], ["1e-06"], ["16"]], "processes": 1, "sample_time": 0.01, "timeout": 36000, "type": "time", "unit": "seconds", "version": "ec4ab73417590ace7eecf7c96126c585680f0deb06c34970214abc93aaa035a1", "warmup_time": 0.0}, "Fullrun.FullParaNitroAniline.peakmem_oscillator_strength": {"code": "class FullrunBase:\n    def default_peakmem_oscillator_strength(self, basis, method, n_states,\n                                            conv_tol, n_threads):\n        \"\"\"\n        Benchmark the memory needed to compute a number of singlet excited states\n        and their oscillator strengths\n        \"\"\"\n        import adcc\n    \n        adcc.set_n_threads(n_threads)\n        res = getattr(adcc, method)(self.scfres, n_states=n_states,\n                                    conv_tol=conv_tol, **self.runadc_kwargs)\n        res.oscillator_strengths\n\n    def default_setup(self, basis, method, n_states, conv_tol, n_threads):\n        from adcc.backends.pyscf import run_hf\n    \n        if \"expensive\" in self.tags and not should_run_expensive():\n            raise NotImplementedError  # Skip testcase\n    \n        # Run the SCF calculation\n        self.scfres = run_hf(self.xyz, basis=basis, **self.runhf_kwargs)", "name": "Fullrun.FullParaNitroAniline.peakmem_oscillator_strength", "param_names": ["basis", "method", "n_states", "conv_tol", "n_threads"], "params": [["'cc-pvdz'"], ["'adc1'", "'adc2'"], ["7"], ["1e-06"], ["16"]], "timeout": 3600, "type": "peakmemory", "unit": "bytes", "version": "2abcd5b88ff66845ae9ce6f9a7a503e2efc3e2cec2b5136385df1478f9b36929"}, "Fullrun.FullParaNitroAniline.time_excitation_energies": {"code": "class FullrunBase:\n    def default_time_excitation_energies(self, basis, method, n_states,\n                                         conv_tol, n_threads):\n        \"\"\"Benchmark the time needed to compute excitation energies\"\"\"\n        import adcc\n    \n        adcc.set_n_threads(n_threads)\n        getattr(adcc, method)(self.scfres, n_states=n_states,\n                              conv_tol=conv_tol, **self.runadc_kwargs)\n\n    def default_setup(self, basis, method, n_states, conv_tol, n_threads):\n        from adcc.backends.pyscf import run_hf\n    \n        if \"expensive\" in self.tags and not should_run_expensive():\n            raise NotImplementedError  # Skip testcase\n    \n        # Run the SCF calculation\n        self.scfres = run_hf(self.xyz, basis=basis, **self.runhf_kwargs)", "min_run_count": 1, "name": "Fullrun.FullParaNitroAniline.time_excitation_energies", "number": 0, "param_names": ["basis", "method", "n_states", "conv_tol", "n_threads"], "params": [["'cc-pvdz'"], ["'adc1'", "'adc2'"], ["7"], ["1e-06"], ["16"]], "processes": 1, "sample_time": 0.01, "timeout": 3600, "type": "time", "unit": "seconds", "version": "ec4ab73417590ace7eecf7c96126c585680f0deb06c34970214abc93aaa035a1", "warmup_time": 0.0}, "Fullrun.FullPhosphineCvs.peakmem_oscillator_strength": {"code": "class FullrunBase:\n    def default_peakmem_oscillator_strength(self, basis, method, n_states,\n                                            conv_tol, n_threads):\n        \"\"\"\n        Benchmark the memory needed to compute a number of singlet excited states\n        and their oscillator strengths\n        \"\"\"\n        import adcc\n    \n        adcc.set_n_threads(n_threads)\n        res = getattr(adcc, method)(self.scfres, n_states=n_states,\n                                    conv_tol=conv_tol, **self.runadc_kwargs)\n        res.oscillator_strengths\n\n    def default_setup(self, basis, method, n_states, conv_tol, n_threads):\n        from adcc.backends.pyscf import run_hf\n    \n        if \"expensive\" in self.tags and not should_run_expensive():\n            raise NotImplementedError  # Skip testcase\n    \n        # Run the SCF calculation\n        self.scfres = run_hf(self.xyz, basis=basis, **self.runhf_kwargs)", "name": "Fullrun.FullPhosphineCvs.peakmem_oscillator_strength", "param_names": ["basis", "method", "n_states", "conv_tol", "n_threads"], "params": [["'6-311++g**'"], ["'cvs_adc1'", "'cvs_adc2'", "'cvs_adc2x'", "'cvs_adc3'"], ["4", "10"], ["1e-06"], ["4"]], "timeout": 3600, "type": "peakmemory", "unit": "bytes", "version": "2abcd5b88ff66845ae9ce6f9a7a503e2efc3e2cec2b5136385df1478f9b36929"}, "Fullrun.FullPhosphineCvs.time_excitation_energies": {"code": "class FullrunBase:\n    def default_time_excitation_energies(self, basis, method, n_states,\n                                         conv_tol, n_threads):\n        \"\"\"Benchmark the time needed to compute excitation energies\"\"\"\n        import adcc\n    \n        adcc.set_n_threads(n_threads)\n        getattr(adcc, method)(self.scfres, n_states=n_states,\n                              conv_tol=conv_tol, **self.runadc_kwargs)\n\n    def default_setup(self, basis, method, n_states, conv_tol, n_threads):\n        from adcc.backends.pyscf import run_hf\n    \n        if \"expensive\" in self.tags and not should_run_expensive():\n            raise NotImplementedError  # Skip testcase\n    \n        # Run the SCF calculation\n        self.scfres = run_hf(self.xyz, basis=basis, **self.runhf_kwargs)", "min_run_count": 2, "name": "Fullrun.FullPhosphineCvs.time_excitation_energies", "number": 0, "param_names": ["basis", "method", "n_states", "conv_tol", "n_threads"], "params": [["'6-311++g**'"], ["'cvs_adc1'", "'cvs_adc2'", "'cvs_adc2x'", "'cvs_adc3'"], ["4", "10"], ["1e-06"], ["4"]], "processes": 2, "sample_time": 0.01, "timeout": 3600, "type": "time", "unit": "seconds", "version": "ec4ab73417590ace7eecf7c96126c585680f0deb06c34970214abc93aaa035a1", "warmup_time": 0.0}, "Fullrun.FullWater.peakmem_oscillator_strength": {"code": "class FullrunBase:\n    def default_peakmem_oscillator_strength(self, basis, method, n_states,\n                                            conv_tol, n_threads):\n        \"\"\"\n        Benchmark the memory needed to compute a number of singlet excited states\n        and their oscillator strengths\n        \"\"\"\n        import adcc\n    \n        adcc.set_n_threads(n_threads)\n        res = getattr(adcc, method)(self.scfres, n_states=n_states,\n                                    conv_tol=conv_tol, **self.runadc_kwargs)\n        res.oscillator_strengths\n\n    def default_setup(self, basis, method, n_states, conv_tol, n_threads):\n        from adcc.backends.pyscf import run_hf\n    \n        if \"expensive\" in self.tags and not should_run_expensive():\n            raise NotImplementedError  # Skip testcase\n    \n        # Run the SCF calculation\n        self.scfres = run_hf(self.xyz, basis=basis, **self.runhf_kwargs)", "name": "Fullrun.FullWater.peakmem_oscillator_strength", "param_names": ["basis", "method", "n_states", "conv_tol", "n_threads"], "params": [["'cc-pvdz'", "'cc-pvtz'"], ["'adc1'", "'adc2'", "'adc2x'", "'adc3'"], ["2", "4", "7", "10"], ["0.001", "1e-06"], ["4"]], "timeout": 3600, "type": "peakmemory", "unit": "bytes", "version": "2abcd5b88ff66845ae9ce6f9a7a503e2efc3e2cec2b5136385df1478f9b36929"}, "Fullrun.FullWater.time_excitation_energies": {"code": "class FullrunBase:\n    def default_time_excitation_energies(self, basis, method, n_states,\n                                         conv_tol, n_threads):\n        \"\"\"Benchmark the time needed to compute excitation energies\"\"\"\n        import adcc\n    \n        adcc.set_n_threads(n_threads)\n        getattr(adcc, method)(self.scfres, n_states=n_states,\n                              conv_tol=conv_tol, **self.runadc_kwargs)\n\n    def default_setup(self, basis, method, n_states, conv_tol, n_threads):\n        from adcc.backends.pyscf import run_hf\n    \n        if \"expensive\" in self.tags and not should_run_expensive():\n            raise NotImplementedError  # Skip testcase\n    \n        # Run the SCF calculation\n        self.scfres = run_hf(self.xyz, basis=basis, **self.runhf_kwargs)", "min_run_count": 2, "name": "Fullrun.FullWater.time_excitation_energies", "number": 0, "param_names": ["basis", "method", "n_states", "conv_tol", "n_threads"], "params": [["'cc-pvdz'", "'cc-pvtz'"], ["'adc1'", "'adc2'", "'adc2x'", "'adc3'"], ["2", "4", "7", "10"], ["0.001", "1e-06"], ["4"]], "processes": 2, "sample_time": 0.01, "timeout": 3600, "type": "time", "unit": "seconds", "version": "ec4ab73417590ace7eecf7c96126c585680f0deb06c34970214abc93aaa035a1", "warmup_time": 0.0}, "Fullrun.FullWaterExpensive.peakmem_oscillator_strength": {"code": "class FullrunBase:\n    def default_peakmem_oscillator_strength(self, basis, method, n_states,\n                                            conv_tol, n_threads):\n        \"\"\"\n        Benchmark the memory needed to compute a number of singlet excited states\n        and their oscillator strengths\n        \"\"\"\n        import adcc\n    \n        adcc.set_n_threads(n_threads)\n        res = getattr(adcc, method)(self.scfres, n_states=n_states,\n                                    conv_tol=conv_tol, **self.runadc_kwargs)\n        res.oscillator_strengths\n\n    def default_setup(self, basis, method, n_states, conv_tol, n_threads):\n        from adcc.backends.pyscf import run_hf\n    \n        if \"expensive\" in self.tags and not should_run_expensive():\n            raise NotImplementedError  # Skip testcase\n    \n        # Run the SCF calculation\n        self.scfres = run_hf(self.xyz, basis=basis, **self.runhf_kwargs)", "name": "Fullrun.FullWaterExpensive.peakmem_oscillator_strength", "param_names": ["basis", "method", "n_states", "conv_tol", "n_threads"], "params": [["'cc-pvqz'"], ["'adc2'", "'adc2x'", "'adc3'"], ["10"], ["1e-06"], ["8"]], "timeout": 3600, "type": "peakmemory", "unit": "bytes", "version": "2abcd5b88ff66845ae9ce6f9a7a503e2efc3e2cec2b5136385df1478f9b36929"}, "Fullrun.FullWaterExpensive.time_excitation_energies": {"code": "class FullrunBase:\n    def default_time_excitation_energies(self, basis, method, n_states,\n                                         conv_tol, n_threads):\n        \"\"\"Benchmark the time needed to compute excitation energies\"\"\"\n        import adcc\n    \n        adcc.set_n_threads(n_threads)\n        getattr(adcc, method)(self.scfres, n_states=n_states,\n                              conv_tol=conv_tol, **self.runadc_kwargs)\n\n    def default_setup(self, basis, method, n_states, conv_tol, n_threads):\n        from adcc.backends.pyscf import run_hf\n    \n        if \"expensive\" in self.tags and not should_run_expensive():\n            raise NotImplementedError  # Skip testcase\n    \n        # Run the SCF calculation\n        self.scfres = run_hf(self.xyz, basis=basis, **self.runhf_kwargs)", "min_run_count": 1, "name": "Fullrun.FullWaterExpensive.time_excitation_energies", "number": 0, "param_names": ["basis", "method", "n_states", "conv_tol", "n_threads"], "params": [["'cc-pvqz'"], ["'adc2'", "'adc2x'", "'adc3'"], ["10"], ["1e-06"], ["8"]], "processes": 1, "sample_time": 0.01, "timeout": 3600, "type": "time", "unit": "seconds", "version": "ec4ab73417590ace7eecf7c96126c585680f0deb06c34970214abc93aaa035a1", "warmup_time": 0.0}, "WaterEriImport.WaterEriImport.peakmem_eri_import": {"code": "class WaterEriImport:\n    def peakmem_eri_import(self, basis, reference, block):\n        self.refstate.cached_eri_blocks = [block]\n\n    def setup(self, basis, reference, block):\n        import adcc\n    \n        # Run SCF in pyscf\n        mol = gto.M(\n            atom='O 0 0 0;'\n                 'H 0 0 1.795239827225189;'\n                 'H 1.693194615993441 0 -0.599043184453037',\n            basis=basis,\n            unit=\"Bohr\",\n            # Disable commandline argument parsing in pyscf\n            parse_arg=False,\n            dump_input=False,\n        )\n        scfres = getattr(scf, reference)(mol)\n        scfres.conv_tol = 1e-8\n        scfres.kernel()\n        self.scfres = scfres\n        self.refstate = adcc.ReferenceState(self.scfres)", "name": "WaterEriImport.WaterEriImport.peakmem_eri_import", "param_names": ["basis", "reference", "block"], "params": [["'cc-pvdz'", "'cc-pvtz'"], ["'RHF'", "'UHF'"], ["'o1v1o1v1'", "'o1o1o1v1'", "'o1o1v1v1'", "'o1v1v1v1'", "'o1o1o1o1'", "'v1v1v1v1'"]], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "93aebaa125954e52bca4c28dc64ae4f053c9107a06115da9d895c7fc7dbc5623"}, "WaterEriImport.WaterEriImport.time_eri_import": {"code": "class WaterEriImport:\n    def time_eri_import(self, basis, reference, block):\n        self.refstate.cached_eri_blocks = [block]\n\n    def setup(self, basis, reference, block):\n        import adcc\n    \n        # Run SCF in pyscf\n        mol = gto.M(\n            atom='O 0 0 0;'\n                 'H 0 0 1.795239827225189;'\n                 'H 1.693194615993441 0 -0.599043184453037',\n            basis=basis,\n            unit=\"Bohr\",\n            # Disable commandline argument parsing in pyscf\n            parse_arg=False,\n            dump_input=False,\n        )\n        scfres = getattr(scf, reference)(mol)\n        scfres.conv_tol = 1e-8\n        scfres.kernel()\n        self.scfres = scfres\n        self.refstate = adcc.ReferenceState(self.scfres)", "min_run_count": 2, "name": "WaterEriImport.WaterEriImport.time_eri_import", "number": 0, "param_names": ["basis", "reference", "block"], "params": [["'cc-pvdz'", "'cc-pvtz'"], ["'RHF'", "'UHF'"], ["'o1v1o1v1'", "'o1o1o1v1'", "'o1o1v1v1'", "'o1v1v1v1'", "'o1o1o1o1'", "'v1v1v1v1'"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "b6889ab6c76b4e034bdb39d96c94a318194e70d44f4553236c0f7486abeca607", "warmup_time": -1}}, "machines": {"mlv-clustern08": {"arch": "x86_64", "cpu": "Intel(R) Xeon(R) CPU E5-2643 0 @ 3.30GHz (2*8 cores HT)", "machine": "mlv-clustern08", "num_cpu": "16", "os": "Linux 4.15.0-66-generic", "ram": "792579188", "version": 1}}, "tags": {"v0.13.1": 397, "v0.13.2": 488, "v0.13.3": 514, "v0.13.4": 530, "v0.14.0": 565, "v0.14.1": 570, "v0.14.2": 575, "v0.14.3": 635}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}